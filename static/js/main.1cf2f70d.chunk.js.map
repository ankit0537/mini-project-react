{"version":3,"sources":["components/Product.jsx","components/ProductList.jsx","App.js","serviceWorker.js","index.js"],"names":["Product","props","className","alt","src","name","price","ProductList","products","map","product","key","App","state","searchValue","fetch","then","response","json","items","setState","this","filterProducts","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAGaA,G,MAAU,SAAAC,GAAK,OAEpB,yBAAKC,UAAU,qBACX,yBAAKC,IAAI,UAAUC,IAAI,aACvB,4BAAKH,EAAMI,MACX,4BAAKJ,EAAMK,UCHVC,G,MAAc,SAACN,GAAD,OACvB,yBAAKC,UAAU,aACVD,EAAMO,SAASC,KAAI,SAAAC,GAAO,OACtB,kBAAC,EAAD,CAASC,IAAKD,EAAQC,IACdN,KAAMK,EAAQL,KACfC,MAAOI,EAAQJ,cCyCpBM,G,wBA5Cb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXL,SAAU,GAUVM,YAAY,IAbF,E,iFAiBO,IAAD,OAClBC,MAAM,uDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEZ,SAAUW,S,+BAGnC,IAAD,SACsBE,KAAKR,MAA3BL,EADA,EACAA,SAASM,EADT,EACSA,YACVQ,EAAgBd,EAASe,QAAO,SAAAb,GAAO,OAAEA,EAAQL,KAAKmB,cAAcC,SAASX,EAAYU,kBAC/F,OACE,yBAAKtB,UAAU,OACb,wBAAIA,UAAU,oBAAd,eACA,2BAAOwB,KAAK,SACVC,YAAY,kBACZzB,UAAU,aACV0B,SAAU,SAAAC,GAAI,EAAKT,SAAS,CAACN,YAAYe,EAAEC,OAAOC,QAAO,kBAAIC,QAAQC,IAAI,EAAKpB,aAGhF,kBAAC,EAAD,CAAaL,SAAUc,S,GApCbY,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDuH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.1cf2f70d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './product.css';\r\n\r\nexport const Product = props=>(\r\n\r\n        <div className=\"product-container\">\r\n            <img alt=\"product\" src=\"ghee.jpg\"></img>\r\n            <h1>{props.name}</h1>\r\n            <h1>{props.price}</h1>\r\n        </div>\r\n);        \r\n\r\n\r\n","import React from 'react'\r\nimport { Product } from './Product'\r\nimport './productsgrid.css';\r\n\r\n\r\nexport const ProductList = (props) => (\r\n    <div className='prod-grid'>\r\n        {props.products.map(product =>\r\n            (<Product key={product.key} \r\n                     name={product.name} \r\n                    price={product.price} />\r\n            ))}\r\n    </div>\r\n)\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { ProductList } from './components/ProductList';\nimport './components/mystyle.css';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      products: [\n        // { id: 123, name: \"tulsi arka\", price: 600 },\n        // { id: 121, name: \"Doopam\", price: 200 },\n        // { id: 124, name: \"basam\", price: 100 },\n        // { id: 125, name: \"haladi\", price: 300 },\n        // { id: 127, name: \"kumkum\", price: 100 },\n        // { id: 129, name: \"karpooram\", price: 5000 },\n        // { id: 128, name: \"cow dung cake\", price: 500 },\n\n      ],\n      searchValue:''\n\n    };\n  }\n  componentDidMount() {\n    fetch('https://myfelight.firebaseapp.com/shriproducts.json')\n      .then(response => response.json())\n      .then(items => this.setState({ products: items }))\n\n  };\n  render() {\n    const {products,searchValue}=this.state;\n    const filterProducts= products.filter(product=>product.name.toLowerCase().includes(searchValue.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1 className='shri-gopala-logo'>Shri Gopala</h1>\n        <input type='search'\n          placeholder='search products'\n          className='search-bar'\n          onChange={e=>{this.setState({searchValue:e.target.value},()=>console.log(this.state));\n   \n          }}/>\n        <ProductList products={filterProducts}>\n\n        </ProductList>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import Greetuser from './Greetuser';\n// import SimpleCalc from './SimpleCalc';\n// import Style from './Style';\n// import Style1 from './Style1';\n// import ProductList from './components/ProductList'\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}